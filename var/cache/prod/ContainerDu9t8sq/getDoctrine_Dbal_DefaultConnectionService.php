<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

$a = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
$b = new \Vich\UploaderBundle\Adapter\ORM\DoctrineORMAdapter();
$c = ${($_ = isset($this->services['vich_uploader.metadata_reader']) ? $this->services['vich_uploader.metadata_reader'] : $this->load('getVichUploader_MetadataReaderService.php')) && false ?: '_'};
$d = ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->load('getVichUploader_UploadHandlerService.php')) && false ?: '_'};

$e = new \Gedmo\Timestampable\TimestampableListener();
$e->setAnnotationReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->getAnnotationReaderService()) && false ?: '_'});

$a->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\CleanListener('anexos', $b, $c, $d));
$a->addEventSubscriber($e);
$a->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\RemoveListener('anexos', $b, $c, $d));
$a->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\UploadListener('anexos', $b, $c, $d));
$a->addEventListener(array(0 => 'prePersist'), new \AppBundle\Doctrine\AppDoctrineEventListener());
$a->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener()) && false ?: '_'});

return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array())) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => '192.168.20.20', 'port' => 3306, 'dbname' => 'registroab', 'user' => 'registroab', 'password' => 'reg1str0.abl23', 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), new \Doctrine\DBAL\Configuration(), $a, array());
